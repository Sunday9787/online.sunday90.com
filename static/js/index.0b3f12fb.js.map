{"version":3,"file":"index.0b3f12fb.js","sources":["../../../src/views/three/earth/index.vue"],"sourcesContent":["<template lang=\"pug\">\n.three-container\n  .absolute(class=\"left-1/2 top-1/2 -translate-y-1/2 -translate-x-1/2 w-5/12\" v-if=\"!hideProgressBar\")\n    el-progress(\n      text-inside\n      :percentage=\"percentage\"\n      :stroke-width=\"26\")\n</template>\n\n<script>\nimport * as THREE from 'three'\nimport gsap from 'gsap'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport Status from 'three/examples/jsm/libs/stats.module'\nimport { sleep } from '@/utils'\n\nexport default {\n  name: 'ThreeEarth',\n  data() {\n    return {\n      percentage: 0,\n      hideProgressBar: false\n    }\n  },\n  mounted() {\n    const vm = this\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\n    const scene = new THREE.Scene()\n    const axesHelper = new THREE.AxesHelper(500)\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)\n    const light = new THREE.PointLight()\n    const lightHelp = new THREE.PointLightHelper(light, 10, 0x3d8ffa)\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.05)\n    const control = new OrbitControls(camera, renderer.domElement)\n\n    /** 性能检测工具 */\n    const status = new Status()\n\n    const bootstrap = function () {\n      renderer.render(scene, camera)\n      status.update()\n      control.update()\n    }\n\n    const resize = function () {\n      // 重置渲染器输出画布canvas尺寸\n      renderer.setSize(window.innerWidth, window.innerHeight)\n      // SVGRenderer.setSize(window.innerWidth, window.innerHeight)\n      // 全屏情况下：设置观察范围长宽比aspect为窗口宽高比\n      camera.aspect = window.innerWidth / window.innerHeight\n\n      control.update()\n      // 渲染器执行render方法的时候会读取相机对象的投影矩阵属性projectionMatrix\n      // 但是不会每渲染一帧，就通过相机的属性计算投影矩阵(节约计算资源)\n      // 如果相机的一些属性发生了变化，需要执行 updateProjectionMatrix()方法更新相机的投影矩阵\n      camera.updateProjectionMatrix()\n    }\n\n    light.position.set(100, 100, 100)\n    control.target.set(0, 0, 0)\n    camera.position.set(0, 0, 120)\n    light.lookAt(0, 0, 0)\n    camera.lookAt(0, 0, 0)\n\n    scene.add(axesHelper, light, lightHelp, ambientLight)\n\n    renderer.setPixelRatio(window.devicePixelRatio)\n    renderer.setClearColor(0xd3e6fb, 1)\n    renderer.setAnimationLoop(bootstrap)\n\n    window.addEventListener('resize', resize)\n    window.dispatchEvent(new Event('resize'))\n\n    const loadingManager = new THREE.LoadingManager()\n    // 在加载资源开始时的回调函数\n    loadingManager.onStart = function (url, itemsLoaded, itemsTotal) {\n      console.log(`Started loading file: ${url}.`)\n      console.log(`Loaded ${itemsLoaded} of ${itemsTotal} files.`)\n    }\n\n    // 在加载资源过程中调用的回调函数\n    loadingManager.onProgress = function (url, itemsLoaded, itemsTotal) {\n      console.log(`Loading file: ${url}.`)\n      console.log(`Loaded ${itemsLoaded} of ${itemsTotal} files.`)\n      vm.percentage = (itemsLoaded / itemsTotal) * 100\n    }\n\n    // 在加载所有资源完成后的回调函数\n    loadingManager.onLoad = function () {\n      console.log('All resources loaded.')\n    }\n\n    // 在加载资源出错时调用的回调函数\n    loadingManager.onError = function (url) {\n      console.error(`There was an error loading ${url}.`)\n    }\n\n    const textureLoader = new THREE.TextureLoader(loadingManager)\n    const earthMapUrl = new URL('@/images/earth/2_no_clouds_8k.jpg', import.meta.url)\n    const cloudMapUrl = new URL('@/images/earth/fair_clouds_8k.png', import.meta.url)\n    const terrainMapUrl = new URL('@/images/earth/elev_bump_8k.jpg', import.meta.url)\n    const starMapUrl = new URL('@/images/earth/starfield.jpg', import.meta.url)\n\n    Promise.all([\n      textureLoader.loadAsync(earthMapUrl.href),\n      textureLoader.loadAsync(cloudMapUrl.href),\n      textureLoader.loadAsync(terrainMapUrl.href),\n      textureLoader.loadAsync(starMapUrl.href)\n    ]).then(async function ([earthTexture, cloudTexture, terrainTexture, starTexture]) {\n      await sleep(500)\n      vm.hideProgressBar = true\n\n      const createSpace = function () {\n        // 创建太空材质\n        const material = new THREE.MeshBasicMaterial({\n          map: starTexture,\n          // 使从里面显示材质\n          side: THREE.BackSide\n        })\n        const geometry = new THREE.SphereGeometry(200, 500, 500)\n        const shape = new THREE.Mesh(geometry, material)\n        return shape\n      }\n\n      const createCloud = function () {\n        // 创建云层的材质，使用透明度\n        const material = new THREE.MeshPhongMaterial({\n          map: cloudTexture,\n          transparent: true // 使云层具有透明效果\n        })\n        const geometry = new THREE.SphereGeometry(50 * 1.02, 100, 100)\n        const shape = new THREE.Mesh(geometry, material)\n\n        return shape\n      }\n\n      const createEarth = function () {\n        // 创建地球材质\n        const material = new THREE.MeshPhongMaterial({\n          map: earthTexture,\n          // 地球地形贴图\n          bumpMap: terrainTexture,\n          bumpScale: 0.3\n        })\n        const geometry = new THREE.SphereGeometry(50, 100, 100)\n        const shape = new THREE.Mesh(geometry, material)\n\n        return shape\n      }\n\n      const earth = createEarth()\n      const cloud = createCloud()\n      const space = createSpace()\n      const group = new THREE.Group()\n      group.add(cloud, earth)\n      scene.add(space, group)\n\n      const tl = gsap.timeline({ defaults: { duration: 6, ease: 'ease' } })\n      // 旋转角度度量单位是弧度 -Math.PI * 2 代表顺时针旋转360°\n      const tl2 = gsap.timeline({ defaults: { y: -Math.PI * 2, repeat: -1, ease: 'linear' } })\n\n      // 进场动画\n      tl.from(group.position, { x: 50, y: 50, z: 50 }).from(group.scale, { x: 2, y: 2, z: 2 }, '<')\n\n      tl2\n        // 星空旋转动画\n        .to(space.rotation, { duration: 360 })\n        // 云层旋转动画（持续时间比地球快一点产生视差效果）\n        .to(cloud.rotation, { duration: 120 }, '<')\n        // 地球旋转动画\n        .to(earth.rotation, { duration: 180 }, '<')\n    })\n\n    this.$el.appendChild(renderer.domElement)\n    this.$el.appendChild(status.dom)\n    this.$once('hook:beforeDestroy', function () {\n      window.removeEventListener('resize', resize)\n      vm.$el.removeChild(status.dom)\n      vm.$el.removeChild(renderer.domElement)\n    })\n  }\n}\n</script>\n"],"names":["name","data","percentage","hideProgressBar","mounted","vm","this","renderer","THREE.WebGLRenderer","antialias","scene","THREE.Scene","axesHelper","THREE.AxesHelper","camera","THREE.PerspectiveCamera","window","innerWidth","innerHeight","light","THREE.PointLight","lightHelp","THREE.PointLightHelper","ambientLight","THREE.AmbientLight","control","OrbitControls","domElement","status","Status","resize","setSize","aspect","update","updateProjectionMatrix","position","set","target","lookAt","add","setPixelRatio","devicePixelRatio","setClearColor","setAnimationLoop","render","addEventListener","dispatchEvent","Event","loadingManager","THREE.LoadingManager","onStart","url","itemsLoaded","itemsTotal","console","log","concat","onProgress","onLoad","onError","error","textureLoader","THREE.TextureLoader","earthMapUrl","URL","self","location","cloudMapUrl","terrainMapUrl","starMapUrl","Promise","all","loadAsync","href","then","async","earthTexture","cloudTexture","terrainTexture","starTexture","sleep","earth","material","THREE.MeshPhongMaterial","map","bumpMap","bumpScale","geometry","THREE.SphereGeometry","THREE.Mesh","createEarth","cloud","transparent","createCloud","space","THREE.MeshBasicMaterial","side","THREE.BackSide","createSpace","group","THREE.Group","tl","gsap","timeline","defaults","duration","ease","tl2","y","Math","PI","repeat","from","x","z","scale","to","rotation","$el","appendChild","dom","$once","removeEventListener","removeChild"],"mappings":"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"}