{"version":3,"file":"index.d6e61aee.js","sources":["../../../src/views/three/dragon/index.vue"],"sourcesContent":["<template lang=\"pug\">\n.three-container\n</template>\n\n<script>\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader'\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry'\nimport gsap from 'gsap'\nimport { radian } from '@/utils'\n\n/**\n * 创建圆弧\n * @param {number} radius 半径\n * @param {number} divisions 步长\n * @param {number} startRadian 起始弧度\n * @param {number} endRadian 结束弧度\n */\nfunction createArc(radius, divisions, startRadian = 0, endRadian = Math.PI * 2) {\n  /**\n   * @type {import('three').Vector3[]}\n   */\n  const points = []\n  const sp = endRadian / divisions\n\n  for (let i = 0; i <= divisions; i++) {\n    const angle = startRadian + i * sp\n    const x = radius * Math.cos(angle)\n    const y = radius * Math.sin(angle)\n    points.push(new THREE.Vector3(x, y, 0))\n  }\n\n  return points\n}\n\nexport default {\n  name: 'ThreeDragon',\n  mounted() {\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\n    const scene = new THREE.Scene()\n    const axesHelper = new THREE.AxesHelper(500)\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)\n    const control = new OrbitControls(camera, renderer.domElement)\n\n    const bootstrap = function () {\n      renderer.render(scene, camera)\n    }\n\n    const resize = function () {\n      // 重置渲染器输出画布canvas尺寸\n      renderer.setSize(window.innerWidth, window.innerHeight)\n      // SVGRenderer.setSize(window.innerWidth, window.innerHeight)\n      // 全屏情况下：设置观察范围长宽比aspect为窗口宽高比\n      camera.aspect = window.innerWidth / window.innerHeight\n\n      control.update()\n      // 渲染器执行render方法的时候会读取相机对象的投影矩阵属性projectionMatrix\n      // 但是不会每渲染一帧，就通过相机的属性计算投影矩阵(节约计算资源)\n      // 如果相机的一些属性发生了变化，需要执行 updateProjectionMatrix()方法更新相机的投影矩阵\n      camera.updateProjectionMatrix()\n    }\n\n    control.target.set(0, 0, 0)\n    camera.position.set(0, 0, 100)\n    camera.lookAt(0, 0, 0)\n    scene.add(axesHelper)\n\n    renderer.setPixelRatio(window.devicePixelRatio)\n    renderer.setClearColor(0xd3e6fb, 1)\n    renderer.setAnimationLoop(bootstrap)\n\n    window.addEventListener('resize', resize)\n    window.dispatchEvent(new Event('resize'))\n\n    const fontLoader = new FontLoader()\n    const fontUrl = new URL('./font/DengXian_Regular.json', import.meta.url)\n\n    /**\n     * @param {string} text\n     * @param {import('three/examples/jsm/loaders/FontLoader').Font} font\n     */\n    const createFont = function (text, font) {\n      const textGeometry = new TextGeometry(text, {\n        font,\n        size: 30,\n        height: 6, // 指定文本的厚度或高度，以像素为单位\n        curveSegments: 100, // 指定曲线的分段数，这会影响文本曲线的光滑程度。分段数越大，曲线越光滑\n        bevelEnabled: true, // 指定是否启用斜角（bevel），即是否给文本添加倒角效果\n        bevelThickness: 2, // 如果启用了斜角，这个参数指定斜角的厚度\n        bevelSize: 2, // 如果启用了斜角，这个参数指定斜角的大小\n        bevelOffset: 2, // 如果启用了斜角，这个参数指定斜角的偏移量。\n        bevelSegments: 2 // 如果启用了斜角，这个参数指定斜角的分段数，影响斜角的光滑程度。\n      })\n\n      const material = new THREE.MeshMatcapMaterial({ color: 0xf44336 })\n      const mesh = new THREE.Mesh(textGeometry, material)\n\n      return mesh\n    }\n\n    const createPlane = function () {\n      const geometry = new THREE.PlaneGeometry(10, 10, 32, 32)\n      // 获取顶点数据\n      const positionAttribute = geometry.attributes.position\n      const vertexArray = positionAttribute.array\n\n      // 修改顶点数据\n      for (let i = 0; i < vertexArray.length; i += 3) {\n        const x = vertexArray[i]\n        const y = vertexArray[i + 1]\n        // 简单的波浪效果\n        vertexArray[i + 2] = Math.sin(x) * Math.cos(y)\n      }\n\n      // 更新顶点数据\n      positionAttribute.needsUpdate = true\n      const material = new THREE.MeshBasicMaterial({ color: 0xff0000, side: THREE.DoubleSide, wireframe: true })\n      const plane = new THREE.Mesh(geometry, material)\n\n      return plane\n    }\n\n    const plane = createPlane()\n    scene.add(plane)\n\n    const createCircle = function () {\n      const points = createArc(100, 100)\n      const geometry = new THREE.BufferGeometry().setFromPoints(points)\n      const material = new THREE.LineBasicMaterial({ color: 0xe91e63 })\n      const line = new THREE.Line(geometry, material)\n      line.position.setZ(50)\n\n      return line\n    }\n\n    const circle = createCircle()\n    scene.add(circle)\n\n    const createCatmullRomCurve3 = function () {\n      const curve = new THREE.CatmullRomCurve3([\n        new THREE.Vector3(-50, 20, 90),\n        new THREE.Vector3(-10, 40, 40),\n        new THREE.Vector3(0, 0, 0),\n        new THREE.Vector3(60, -60, 0),\n        new THREE.Vector3(70, 0, 80)\n      ])\n\n      const points = curve.getPoints(100)\n      const geometry = new THREE.BufferGeometry().setFromPoints(points)\n      const material = new THREE.LineBasicMaterial({ color: 0xe92903 })\n      const line = new THREE.Line(geometry, material)\n\n      return line\n    }\n\n    const catmullRomLine = createCatmullRomCurve3()\n    scene.add(catmullRomLine)\n\n    const createLine3d = function () {\n      const shape = new THREE.Shape()\n      const R = 80 // 圆弧半径\n      const H = 200 // 直线部分高度\n      // 直线1\n      const line1 = new THREE.LineCurve(new THREE.Vector2(R, H), new THREE.Vector2(R, 0))\n      // 圆弧\n      const arc = new THREE.ArcCurve(0, 0, R, 0, radian(-90), true)\n      // 直线2\n      const line2 = new THREE.LineCurve(new THREE.Vector2(-H, -R), new THREE.Vector2(-H, -R))\n\n      // CurvePath创建一个组合曲线对象\n      const curvePath = new THREE.CurvePath()\n      // line1, arc, line2拼接出来一个U型轮廓曲线，注意顺序\n      curvePath.curves.push(line1, arc, line2)\n\n      // 执行.getPoints()，直线部分不会像曲线返回中间多余点，只需要起始点即可。\n      const pointsArr = curvePath.getPoints(100) // 曲线上获取点\n      shape.setFromPoints(pointsArr)\n\n      const geometry = new THREE.ExtrudeGeometry(shape, {\n        steps: 1,\n        depth: 50, // 拉伸的深度\n        bevelEnabled: false\n      })\n\n      // 创建材质\n      const material = new THREE.MeshBasicMaterial({ color: 0x00ff00, side: THREE.DoubleSide })\n      const mesh = new THREE.Mesh(geometry, material)\n      return mesh\n    }\n\n    const line3d = createLine3d()\n    // scene.add(line3d)\n    console.log(line3d)\n\n    const createPoint = function () {\n      const index = new THREE.BufferAttribute(new Float32Array([0, 0, 0, 10, 0, 0, 10, 10, 0, 0, 10, 0]), 3)\n      const geometry = new THREE.BufferGeometry()\n      const material = new THREE.PointsMaterial({ color: 0xffff00, size: 5 })\n      const point = new THREE.Points(geometry, material)\n      geometry.setAttribute('position', index)\n      point.position.setZ(80)\n\n      return point\n    }\n\n    const point = createPoint()\n    scene.add(point)\n\n    const createBackground = function () {\n      const R = 80 // 圆弧半径\n      const H = 200 // 直线部分高度\n      // 直线1\n      const line1 = new THREE.LineCurve(new THREE.Vector2(R, H), new THREE.Vector2(R, 0))\n      // 圆弧\n      const arc = new THREE.ArcCurve(0, 0, R, 0, radian(-90), true)\n      // 直线2\n      const line2 = new THREE.LineCurve(new THREE.Vector2(-H, -R), new THREE.Vector2(-H, -R))\n\n      // CurvePath创建一个组合曲线对象\n      const curvePath = new THREE.CurvePath()\n      // line1, arc, line2拼接出来一个U型轮廓曲线，注意顺序\n      curvePath.curves.push(line1, arc, line2)\n\n      // 执行.getPoints()，直线部分不会像曲线返回中间多余点，只需要起始点即可。\n      const pointsArr = curvePath.getPoints(100) // 曲线上获取点\n      const geometry = new THREE.BufferGeometry()\n      geometry.setFromPoints(pointsArr) // 读取坐标数据赋值给几何体顶点\n      const material = new THREE.LineBasicMaterial({ color: 0x35ee, side: THREE.DoubleSide })\n      const line = new THREE.Line(geometry, material)\n      line.rotateY(Math.PI)\n\n      return line\n    }\n\n    const background = createBackground()\n    scene.add(background)\n\n    fontLoader.loadAsync(fontUrl.href).then(function (font) {\n      const texts = '龙年大吉'.split('')\n      const group = new THREE.Group()\n\n      const curve = new THREE.LineCurve3(new THREE.Vector3(-200, 0, 0), new THREE.Vector3(100, 100, 0))\n\n      const points = curve.getPoints(100)\n      const geometry = new THREE.BufferGeometry().setFromPoints(points)\n      const material = new THREE.LineBasicMaterial({ color: 0x009688 })\n      const line = new THREE.Line(geometry, material)\n      scene.add(line)\n\n      const tl = gsap.timeline({\n        repeat: -1,\n        defaults: {\n          duration: 2,\n          ease: 'elastic.out(1, .75)'\n        }\n      })\n\n      for (let i = 0; i < texts.length; i++) {\n        const text = texts[i]\n        const textMesh = createFont(text, font)\n        textMesh.geometry.center()\n        textMesh.position.set(i * 60, 0, 10)\n        tl.to(textMesh.position, { x: '+=40', delay: i * 0.1 }, '<').to(\n          textMesh.rotation,\n          { y: (Math.PI / 180) * 360 },\n          '<'\n        )\n        group.add(textMesh)\n      }\n\n      // 居中文字组\n      group.position.setX((60 * texts.length) / -2)\n      scene.add(group)\n    })\n\n    this.$el.appendChild(renderer.domElement)\n    this.$once('hook:beforeDestroy', function () {\n      window.removeEventListener('resize', resize)\n    })\n  }\n}\n</script>\n"],"names":["name","mounted","renderer","THREE.WebGLRenderer","antialias","scene","THREE.Scene","axesHelper","THREE.AxesHelper","camera","THREE.PerspectiveCamera","window","innerWidth","innerHeight","control","OrbitControls","domElement","resize","setSize","aspect","update","updateProjectionMatrix","target","set","position","lookAt","add","setPixelRatio","devicePixelRatio","setClearColor","setAnimationLoop","render","addEventListener","dispatchEvent","Event","fontLoader","FontLoader","fontUrl","URL","self","location","createFont","text","font","textGeometry","TextGeometry","size","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","material","THREE.MeshMatcapMaterial","color","THREE.Mesh","plane","geometry","THREE.PlaneGeometry","positionAttribute","attributes","vertexArray","array","i","length","x","y","Math","sin","cos","needsUpdate","THREE.MeshBasicMaterial","side","THREE.DoubleSide","wireframe","createPlane","circle","points","radius","divisions","startRadian","endRadian","PI","sp","angle","push","THREE.Vector3","createArc","THREE.BufferGeometry","setFromPoints","THREE.LineBasicMaterial","line","THREE.Line","setZ","createCircle","catmullRomLine","THREE.CatmullRomCurve3","getPoints","createCatmullRomCurve3","line3d","shape","THREE.Shape","line1","THREE.LineCurve","THREE.Vector2","arc","THREE.ArcCurve","radian","line2","curvePath","THREE.CurvePath","curves","pointsArr","THREE.ExtrudeGeometry","steps","depth","createLine3d","console","log","point","index","THREE.BufferAttribute","Float32Array","THREE.PointsMaterial","THREE.Points","setAttribute","createPoint","background","rotateY","createBackground","loadAsync","href","then","texts","split","group","THREE.Group","THREE.LineCurve3","tl","gsap","timeline","repeat","defaults","duration","ease","textMesh","center","to","delay","rotation","setX","this","$el","appendChild","$once","removeEventListener"],"mappings":"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"}